service: jd-backend

provider:
  name: aws
  runtime: python3.9
  region: eu-west-1
  stage: dev
  environment:
    COGNITO_USER_POOL_ID: eu-west-1_J3SXFvZbW
    DYNAMO_ENDPOINT: http://localhost:8000 # Add this line to point to the local DynamoDB endpoint

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
        - dynamodb:GetItem
      Resource:
        - arn:aws:s3:::${self:custom.frontendBucketName}
        - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/JD_User

plugins:
  # for front end
  - serverless-finch
  - serverless-s3-sync

  # for lambda
  - serverless-python-requirements

  # for testing locally
  - serverless-offline

# this is not working
#  - serverless-dynamodb-local

functions:
  - ${file(login-functions.yml)}
#  - ${file(application-functions.yml)}

custom:
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      docker: true
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
      noStart: true

  serverless-offline:
    httpPort: 4000
    customEnvironment:
      IS_OFFLINE: true

  offline:
    customEnvironment:
      IS_OFFLINE: true

  cors:
    origins:
        - http://jobsearchdashboard.com.s3-website-eu-west-1.amazonaws.com/

  frontendBucketName: jobsearchdashboard.com
  client:
    bucketName: ${self:custom.frontendBucketName}
    distributionFolder: ../frontend/build
  s3Sync:
    - bucketName: ${self:custom.frontendBucketName}
      localDir: ../frontend/build
  pythonRequirements:
    slim: true

resources:
  - ${file(database-resources.yml)}
  - ${file(s3-resources.yml)}
  - ${file(login-resources.yml)}
#  - ${file(application-resources.yml)}
