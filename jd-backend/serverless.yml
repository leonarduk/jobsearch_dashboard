service: jd-backend

provider:
  name: aws
  runtime: python3.9
  region: eu-west-1
  stage: dev
  environment:
    COGNITO_USER_POOL_ID: eu-west-1_J3SXFvZbW

functions:
  login:
    handler: user_login.login
    timeout: 10
    role: LoginRole # Role reference

    iamRoleStatements: # Define permissions here
      - Effect: Allow
        Action:
          - s3:*
        Resource:
          - arn:aws:s3:::${self:custom.frontendBucketName}

    events:
      - http:
          path: login
          method: post
          cors: true

  signup:
    handler: user_signup.signup
    timeout: 10
    role: SignupRole

    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:*
        Resource:
          - arn:aws:s3:::${self:custom.frontendBucketName}
    events:
      - http:
          path: signup
          method: post
          cors: true

#  createJobApplication:
#    handler: job_application.create_job_application
#    timeout: 10
#    role: CreateJobApplicationRole
#    events:
#      - http:
#          path: jobApplications
#          method: post
#          cors: true

#  readJobApplication:
#    handler: job_application.read_job_application
#    timeout: 10
#    role: ReadJobApplicationRole
#    events:
#      - http:
#          path: jobApplications/{id}
#          method: get
#          cors: true
#
#  updateJobApplication:
#    handler: job_application.update_job_application
#    timeout: 10
#    role: UpdateJobApplicationRole
#    events:
#      - http:
#          path: jobApplications/{id}
#          method: put
#          cors: true

#  deleteJobApplication:
#    handler: job_application.delete_job_application
#    timeout: 10
#    role: DeleteJobApplicationRole
#    events:
#      - http:
#          path: jobApplications/{id}
#          method: delete
#          cors: true
#
#  listJobApplications:
#    handler: job_application.list_job_applications
#    timeout: 10
#    role: ListJobApplicationsRole
#    events:
#      - http:
#          path: jobApplications
#          method: get
#          cors: true

plugins:
  # for front end
  - serverless-finch
  - serverless-s3-sync

  # for lambda
  - serverless-python-requirements

  # for testing locally
  - serverless-offline
  - serverless-dynamodb-local

custom:
  frontendBucketName: jobsearchdashboard.com
  client:
    bucketName: ${self:custom.frontendBucketName}
    distributionFolder: ../frontend/build
  s3Sync:
    - bucketName: ${self:custom.frontendBucketName}
      localDir: ../frontend/build
  pythonRequirements:
    slim: true
  serverless-offline:
    httpPort: 4000
  dynamodb:
    start:
      port: 8000
      inMemory: false
      dbPath: null
      sharedDb: true
      delayTransientStatuses: false
      cors: null

resources:
  Resources:
    LoginRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: LoginRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: LambdaS3Access
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:*
                  Resource: "arn:aws:s3:::${self:custom.frontendBucketName}/*"

    SignupRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: SignupRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: LambdaS3Access
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:*
                  Resource: "arn:aws:s3:::${self:custom.frontendBucketName}/*"

    FrontendBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.frontendBucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    FrontendBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:custom.frontendBucketName}
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action: s3:GetObject
              Resource: "arn:aws:s3:::${self:custom.frontendBucketName}/*"
              Principal: "*"

    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: JD_User
        AttributeDefinitions:
          - AttributeName: UserId
            AttributeType: S
        KeySchema:
          - AttributeName: UserId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    JobApplicationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: JD_JobApplication
        AttributeDefinitions:
          - AttributeName: ApplicationId
            AttributeType: S
          - AttributeName: UserId
            AttributeType: S
        KeySchema:
          - AttributeName: ApplicationId
            KeyType: HASH
          - AttributeName: UserId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    RecruiterTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: JD_Recruiter
        AttributeDefinitions:
          - AttributeName: RecruiterId
            AttributeType: S
        KeySchema:
          - AttributeName: RecruiterId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: JD_Notes
        AttributeDefinitions:
          - AttributeName: NoteId
            AttributeType: S
          - AttributeName: UserId
            AttributeType: S
        KeySchema:
          - AttributeName: NoteId
            KeyType: HASH
          - AttributeName: UserId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    RemindersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: JD_Reminders
        AttributeDefinitions:
          - AttributeName: ReminderId
            AttributeType: S
          - AttributeName: UserId
            AttributeType: S
        KeySchema:
          - AttributeName: ReminderId
            KeyType: HASH
          - AttributeName: UserId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

#  CreateJobApplicationRole:
#    Type: AWS::IAM::Role
#    Properties:
#      RoleName: CreateJobApplicationRole
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - lambda.amazonaws.com
#            Action:
#              - sts:AssumeRole
#      Policies:
#        - PolicyName: LambdaDynamoDBAccess
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Effect: Allow
#                Action:
#                  - dynamodb:PutItem
#                Resource: "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/JD_JobApplication"
#
#  ReadJobApplicationRole:
#    Type: AWS::IAM::Role
#    Properties:
#      RoleName: ReadJobApplicationRole
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - lambda.amazonaws.com
#            Action:
#              - sts:AssumeRole
#      Policies:
#        - PolicyName: LambdaDynamoDBAccess
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Effect: Allow
#                Action:
#                  - dynamodb:GetItem
#                Resource: "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/JD_JobApplication/*"
#
#  UpdateJobApplicationRole:
#    Type: AWS::IAM::Role
#    Properties:
#      RoleName: UpdateJobApplicationRole
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - lambda.amazonaws.com
#            Action:
#              - sts:AssumeRole
#      Policies:
#        - PolicyName: LambdaDynamoDBAccess
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Effect: Allow
#                Action:
#                  - dynamodb:UpdateItem
#                Resource: "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/JD_JobApplication/*"
#
#  DeleteJobApplicationRole:
#    Type: AWS::IAM::Role
#    Properties:
#      RoleName: DeleteJobApplicationRole
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - lambda.amazonaws.com
#            Action:
#              - sts:AssumeRole
#      Policies:
#        - PolicyName: LambdaDynamoDBAccess
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Effect: Allow
#                Action:
#                  - dynamodb:DeleteItem
#                Resource: "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/JD_JobApplication/*"
#
#  ListJobApplicationsRole:
#    Type: AWS::IAM::Role
#    Properties:
#      RoleName: ListJobApplicationsRole
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - lambda.amazonaws.com
#            Action:
#              - sts:AssumeRole
#      Policies:
#        - PolicyName: LambdaDynamoDBAccess
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Effect: Allow
#                Action:
#                  - dynamodb:Scan
#                Resource: "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/JD_JobApplication"
