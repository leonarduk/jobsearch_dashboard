service: jd-backend

provider:
  name: aws
  runtime: python3.9
  region: eu-west-1
  stage: dev
  environment:
    COGNITO_USER_POOL_ID: eu-west-1_J3SXFvZbW

functions:
  login:
    handler: user_login.login
    timeout: 10
    role: LoginRole # Role reference

    iamRoleStatements: # Define permissions here
      - Effect: Allow
        Action:
          - s3:*
        Resource:
          - arn:aws:s3:::${self:custom.frontendBucketName}

    events:
      - http:
          path: login
          method: post
          cors: true

  signup:
    handler: user_signup.signup
    timeout: 10 # Increase the timeout value in seconds as needed
    role: SignupRole

    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:*
        Resource:
          - arn:aws:s3:::${self:custom.frontendBucketName}
    events:
      - http:
          path: signup
          method: post
          cors: true

plugins:
  # for front end
  - serverless-finch
  - serverless-s3-sync

  # for lambda
  - serverless-python-requirements

  # for testing locally
  - serverless-offline
  - serverless-dynamodb-local

custom:
  frontendBucketName: jobsearchdashboard.com
  client:
    bucketName: ${self:custom.frontendBucketName}
    distributionFolder: ../frontend/build
  s3Sync:
    - bucketName: ${self:custom.frontendBucketName}
      localDir: ../frontend/build
  pythonRequirements:
    slim: true
  serverless-offline:
    httpPort: 4000
  dynamodb:
    start:
      port: 8000
      inMemory: false
      dbPath: null
      sharedDb: true
      delayTransientStatuses: false
      cors: null

resources:
  Resources:
    FrontendBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.frontendBucketName}
    FrontendBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:custom.frontendBucketName}
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action: s3:GetObject
              Resource: "arn:aws:s3:::${self:custom.frontendBucketName}/*"
              Principal: "*"

    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: JD_User
        AttributeDefinitions:
          - AttributeName: UserId
            AttributeType: S
        KeySchema:
          - AttributeName: UserId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    JobApplicationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: JD_JobApplication
        AttributeDefinitions:
          - AttributeName: ApplicationId
            AttributeType: S
          - AttributeName: UserId
            AttributeType: S
        KeySchema:
          - AttributeName: ApplicationId
            KeyType: HASH
          - AttributeName: UserId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    RecruiterTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: JD_Recruiter
        AttributeDefinitions:
          - AttributeName: RecruiterId
            AttributeType: S
        KeySchema:
          - AttributeName: RecruiterId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: JD_Notes
        AttributeDefinitions:
          - AttributeName: NoteId
            AttributeType: S
          - AttributeName: UserId
            AttributeType: S
        KeySchema:
          - AttributeName: NoteId
            KeyType: HASH
          - AttributeName: UserId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    RemindersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: JD_Reminders
        AttributeDefinitions:
          - AttributeName: ReminderId
            AttributeType: S
          - AttributeName: UserId
            AttributeType: S
        KeySchema:
          - AttributeName: ReminderId
            KeyType: HASH
          - AttributeName: UserId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

